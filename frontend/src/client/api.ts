/* tslint:disable */
/* eslint-disable */
/**
 * Belorder Test
 * API docs for the test
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface EntryDto
 */
export interface EntryDto {
    /**
     * Entry\'s id.
     * @type {string}
     * @memberof EntryDto
     */
    'id': string;
    /**
     * Id of the user that has created the entry.
     * @type {string}
     * @memberof EntryDto
     */
    'userId': string;
    /**
     * Title of the entry
     * @type {string}
     * @memberof EntryDto
     */
    'title': string;
    /**
     * Description of the entry.
     * @type {string}
     * @memberof EntryDto
     */
    'description': string;
    /**
     * URI of the attached image
     * @type {string}
     * @memberof EntryDto
     */
    'image'?: string;
    /**
     * Date when the entry was added.
     * @type {string}
     * @memberof EntryDto
     */
    'date': string;
}
/**
 *
 * @export
 * @interface EntryParamsRequest
 */
export interface EntryParamsRequest {
    /**
     * Title of the entry
     * @type {string}
     * @memberof EntryParamsRequest
     */
    'title': string;
    /**
     * Description of the entry.
     * @type {string}
     * @memberof EntryParamsRequest
     */
    'description': string;
    /**
     * ID of the image.
     * @type {string}
     * @memberof EntryParamsRequest
     */
    'image'?: string;
    /**
     * Date when the entry was added.
     * @type {string}
     * @memberof EntryParamsRequest
     */
    'date': string;
}
/**
 *
 * @export
 * @interface EntryStatsQuantityResponse
 */
export interface EntryStatsQuantityResponse {
    /**
     * Stats date
     * @type {string}
     * @memberof EntryStatsQuantityResponse
     */
    'date': string;
    /**
     * Quantity of entries created per day (from all the users)
     * @type {number}
     * @memberof EntryStatsQuantityResponse
     */
    'quantity': number;
}
/**
 *
 * @export
 * @interface EntryStatsResponse
 */
export interface EntryStatsResponse {
    /**
     * Quantity of entries created per day (from all the users)
     * @type {Array<EntryStatsQuantityResponse>}
     * @memberof EntryStatsResponse
     */
    'entriesPerDay': Array<EntryStatsQuantityResponse>;
    /**
     *
     * @type {EntryStatsResponseEntriesWeekComparison}
     * @memberof EntryStatsResponse
     */
    'entriesWeekComparison': EntryStatsResponseEntriesWeekComparison;
}
/**
 * Quantity of entries created previous 7 days compared to the entries created last 7 days
 * @export
 * @interface EntryStatsResponseEntriesWeekComparison
 */
export interface EntryStatsResponseEntriesWeekComparison {
    /**
     * Entries created in the previous 7 days
     * @type {number}
     * @memberof EntryStatsResponseEntriesWeekComparison
     */
    'previous7Days': number;
    /**
     * Entries created in the last 7 days
     * @type {number}
     * @memberof EntryStatsResponseEntriesWeekComparison
     */
    'last7Days': number;
}
/**
 *
 * @export
 * @interface EntryStatsWeekComparisonResponse
 */
export interface EntryStatsWeekComparisonResponse {
    /**
     * Entries created in the previous 7 days
     * @type {number}
     * @memberof EntryStatsWeekComparisonResponse
     */
    'previous7Days': number;
    /**
     * Entries created in the last 7 days
     * @type {number}
     * @memberof EntryStatsWeekComparisonResponse
     */
    'last7Days': number;
}
/**
 *
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * The username
     * @type {string}
     * @memberof LoginRequest
     */
    'username': string;
    /**
     * The password
     * @type {string}
     * @memberof LoginRequest
     */
    'password': string;
}
/**
 *
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * The access token to be used for accessing the services
     * @type {string}
     * @memberof LoginResponse
     */
    'token': string;
    /**
     *
     * @type {LoginResponseUser}
     * @memberof LoginResponse
     */
    'user': LoginResponseUser;
}
/**
 * Authenticated user
 * @export
 * @interface LoginResponseUser
 */
export interface LoginResponseUser {
    /**
     * User\'s id
     * @type {string}
     * @memberof LoginResponseUser
     */
    'id': string;
    /**
     * User\'s username
     * @type {string}
     * @memberof LoginResponseUser
     */
    'username': string;
    /**
     * User\'s role
     * @type {string}
     * @memberof LoginResponseUser
     */
    'role': LoginResponseUserRoleEnum;
}

export const LoginResponseUserRoleEnum = {
    User: 'user',
    Admin: 'admin'
} as const;

export type LoginResponseUserRoleEnum = typeof LoginResponseUserRoleEnum[keyof typeof LoginResponseUserRoleEnum];

/**
 *
 * @export
 * @interface PaginatedResultResponse
 */
export interface PaginatedResultResponse {
    /**
     * Requested page
     * @type {number}
     * @memberof PaginatedResultResponse
     */
    'page': number;
    /**
     * Max number of entries
     * @type {number}
     * @memberof PaginatedResultResponse
     */
    'limit': number;
    /**
     * Items found in the page
     * @type {Array<PopulatedEntryDto>}
     * @memberof PaginatedResultResponse
     */
    'items': Array<PopulatedEntryDto>;
    /**
     * Total number of pages
     * @type {number}
     * @memberof PaginatedResultResponse
     */
    'pages': number;
    /**
     * Total number of items
     * @type {number}
     * @memberof PaginatedResultResponse
     */
    'count': number;
}
/**
 *
 * @export
 * @interface PopulatedEntryDto
 */
export interface PopulatedEntryDto {
    /**
     * Entry\'s id.
     * @type {string}
     * @memberof PopulatedEntryDto
     */
    'id': string;
    /**
     * Id of the user that has created the entry.
     * @type {string}
     * @memberof PopulatedEntryDto
     */
    'userId': string;
    /**
     * Title of the entry
     * @type {string}
     * @memberof PopulatedEntryDto
     */
    'title': string;
    /**
     * Description of the entry.
     * @type {string}
     * @memberof PopulatedEntryDto
     */
    'description': string;
    /**
     * URI of the attached image
     * @type {string}
     * @memberof PopulatedEntryDto
     */
    'image'?: string;
    /**
     * Date when the entry was added.
     * @type {string}
     * @memberof PopulatedEntryDto
     */
    'date': string;
    /**
     *
     * @type {PopulatedEntryDtoUser}
     * @memberof PopulatedEntryDto
     */
    'user': PopulatedEntryDtoUser;
}
/**
 * User that added the entry
 * @export
 * @interface PopulatedEntryDtoUser
 */
export interface PopulatedEntryDtoUser {
    /**
     * User\'s id
     * @type {string}
     * @memberof PopulatedEntryDtoUser
     */
    'id': string;
    /**
     * User\'s username
     * @type {string}
     * @memberof PopulatedEntryDtoUser
     */
    'username': string;
    /**
     * User\'s role
     * @type {string}
     * @memberof PopulatedEntryDtoUser
     */
    'role': PopulatedEntryDtoUserRoleEnum;
}

export const PopulatedEntryDtoUserRoleEnum = {
    User: 'user',
    Admin: 'admin'
} as const;

export type PopulatedEntryDtoUserRoleEnum = typeof PopulatedEntryDtoUserRoleEnum[keyof typeof PopulatedEntryDtoUserRoleEnum];

/**
 *
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * User\'s id
     * @type {string}
     * @memberof UserDto
     */
    'id': string;
    /**
     * User\'s username
     * @type {string}
     * @memberof UserDto
     */
    'username': string;
    /**
     * User\'s role
     * @type {string}
     * @memberof UserDto
     */
    'role': UserDtoRoleEnum;
}

export const UserDtoRoleEnum = {
    User: 'user',
    Admin: 'admin'
} as const;

export type UserDtoRoleEnum = typeof UserDtoRoleEnum[keyof typeof UserDtoRoleEnum];


/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets all entries paginated
         * @summary
         * @param {number} page Requested page
         * @param {number} limit Max number of items
         * @param {string} [fromDate] Initial date from which should look for entries
         * @param {string} [toDate] Final date before which should look for entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntriesPaginated: async (page: number, limit: number, fromDate?: string, toDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getAllEntriesPaginated', 'page', page)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('getAllEntriesPaginated', 'limit', limit)
            const localVarPath = `/api/v1/admin/entries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (fromDate !== undefined) {
                localVarQueryParameter['fromDate'] = (fromDate as any instanceof Date) ?
                    (fromDate as any).toISOString() :
                    fromDate;
            }

            if (toDate !== undefined) {
                localVarQueryParameter['toDate'] = (toDate as any instanceof Date) ?
                    (toDate as any).toISOString() :
                    toDate;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets stats for the entries
         * @summary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntryStats: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/entries/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration)
    return {
        /**
         * Gets all entries paginated
         * @summary
         * @param {number} page Requested page
         * @param {number} limit Max number of items
         * @param {string} [fromDate] Initial date from which should look for entries
         * @param {string} [toDate] Final date before which should look for entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEntriesPaginated(page: number, limit: number, fromDate?: string, toDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEntriesPaginated(page, limit, fromDate, toDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets stats for the entries
         * @summary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntryStats(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntryStatsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntryStats(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminApiFp(configuration)
    return {
        /**
         * Gets all entries paginated
         * @summary
         * @param {AdminApiGetAllEntriesPaginatedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntriesPaginated(requestParameters: AdminApiGetAllEntriesPaginatedRequest, options?: AxiosRequestConfig): AxiosPromise<PaginatedResultResponse> {
            return localVarFp.getAllEntriesPaginated(requestParameters.page, requestParameters.limit, requestParameters.fromDate, requestParameters.toDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets stats for the entries
         * @summary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntryStats(options?: AxiosRequestConfig): AxiosPromise<EntryStatsResponse> {
            return localVarFp.getEntryStats(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAllEntriesPaginated operation in AdminApi.
 * @export
 * @interface AdminApiGetAllEntriesPaginatedRequest
 */
export interface AdminApiGetAllEntriesPaginatedRequest {
    /**
     * Requested page
     * @type {number}
     * @memberof AdminApiGetAllEntriesPaginated
     */
    readonly page: number

    /**
     * Max number of items
     * @type {number}
     * @memberof AdminApiGetAllEntriesPaginated
     */
    readonly limit: number

    /**
     * Initial date from which should look for entries
     * @type {string}
     * @memberof AdminApiGetAllEntriesPaginated
     */
    readonly fromDate?: string

    /**
     * Final date before which should look for entries
     * @type {string}
     * @memberof AdminApiGetAllEntriesPaginated
     */
    readonly toDate?: string
}

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI {
    /**
     * Gets all entries paginated
     * @summary
     * @param {AdminApiGetAllEntriesPaginatedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public getAllEntriesPaginated(requestParameters: AdminApiGetAllEntriesPaginatedRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).getAllEntriesPaginated(requestParameters.page, requestParameters.limit, requestParameters.fromDate, requestParameters.toDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets stats for the entries
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public getEntryStats(options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).getEntryStats(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Gets the current user from thw JWT token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Log in the system using the user credentials
         * @param {LoginRequest} loginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginRequest: LoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('login', 'loginRequest', loginRequest)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Gets the current user from thw JWT token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Log in the system using the user credentials
         * @param {LoginRequest} loginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginRequest: LoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         *
         * @summary Gets the current user from thw JWT token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser(options?: AxiosRequestConfig): AxiosPromise<UserDto> {
            return localVarFp.getCurrentUser(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Log in the system using the user credentials
         * @param {AuthApiLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(requestParameters: AuthApiLoginRequest, options?: AxiosRequestConfig): AxiosPromise<LoginResponse> {
            return localVarFp.login(requestParameters.loginRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for login operation in AuthApi.
 * @export
 * @interface AuthApiLoginRequest
 */
export interface AuthApiLoginRequest {
    /**
     *
     * @type {LoginRequest}
     * @memberof AuthApiLogin
     */
    readonly loginRequest: LoginRequest
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     *
     * @summary Gets the current user from thw JWT token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public getCurrentUser(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).getCurrentUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Log in the system using the user credentials
     * @param {AuthApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public login(requestParameters: AuthApiLoginRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).login(requestParameters.loginRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EntriesApi - axios parameter creator
 * @export
 */
export const EntriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new diary entry
         * @summary
         * @param {EntryParamsRequest} entryParamsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntry: async (entryParamsRequest: EntryParamsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entryParamsRequest' is not null or undefined
            assertParamExists('createEntry', 'entryParamsRequest', entryParamsRequest)
            const localVarPath = `/api/v1/entries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(entryParamsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes one entry by its id
         * @summary
         * @param {string} id Id of the entry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntry: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteEntry', 'id', id)
            const localVarPath = `/api/v1/entries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets all entries paginated
         * @summary
         * @param {number} page Requested page
         * @param {number} limit Max number of items
         * @param {string} [fromDate] Initial date from which should look for entries
         * @param {string} [toDate] Final date before which should look for entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntriesPaginated: async (page: number, limit: number, fromDate?: string, toDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getAllEntriesPaginated', 'page', page)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('getAllEntriesPaginated', 'limit', limit)
            const localVarPath = `/api/v1/admin/entries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (fromDate !== undefined) {
                localVarQueryParameter['fromDate'] = (fromDate as any instanceof Date) ?
                    (fromDate as any).toISOString() :
                    fromDate;
            }

            if (toDate !== undefined) {
                localVarQueryParameter['toDate'] = (toDate as any instanceof Date) ?
                    (toDate as any).toISOString() :
                    toDate;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets all the entries for the connected user
         * @summary
         * @param {string} [fromDate] Initial date from which should look for entries
         * @param {string} [toDate] Final date before which should look for entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntries: async (fromDate?: string, toDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/entries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (fromDate !== undefined) {
                localVarQueryParameter['fromDate'] = (fromDate as any instanceof Date) ?
                    (fromDate as any).toISOString() :
                    fromDate;
            }

            if (toDate !== undefined) {
                localVarQueryParameter['toDate'] = (toDate as any instanceof Date) ?
                    (toDate as any).toISOString() :
                    toDate;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets one entry by id
         * @summary
         * @param {string} id Id of the entry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntry: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getEntry', 'id', id)
            const localVarPath = `/api/v1/entries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets stats for the entries
         * @summary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntryStats: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/entries/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates one entry by its id
         * @summary
         * @param {string} id Id of the entry
         * @param {EntryParamsRequest} entryParamsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntry: async (id: string, entryParamsRequest: EntryParamsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateEntry', 'id', id)
            // verify required parameter 'entryParamsRequest' is not null or undefined
            assertParamExists('updateEntry', 'entryParamsRequest', entryParamsRequest)
            const localVarPath = `/api/v1/entries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(entryParamsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EntriesApi - functional programming interface
 * @export
 */
export const EntriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EntriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new diary entry
         * @summary
         * @param {EntryParamsRequest} entryParamsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEntry(entryParamsRequest: EntryParamsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEntry(entryParamsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes one entry by its id
         * @summary
         * @param {string} id Id of the entry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEntry(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEntry(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets all entries paginated
         * @summary
         * @param {number} page Requested page
         * @param {number} limit Max number of items
         * @param {string} [fromDate] Initial date from which should look for entries
         * @param {string} [toDate] Final date before which should look for entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEntriesPaginated(page: number, limit: number, fromDate?: string, toDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEntriesPaginated(page, limit, fromDate, toDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets all the entries for the connected user
         * @summary
         * @param {string} [fromDate] Initial date from which should look for entries
         * @param {string} [toDate] Final date before which should look for entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntries(fromDate?: string, toDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EntryDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntries(fromDate, toDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets one entry by id
         * @summary
         * @param {string} id Id of the entry
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntry(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntry(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets stats for the entries
         * @summary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntryStats(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntryStatsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntryStats(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates one entry by its id
         * @summary
         * @param {string} id Id of the entry
         * @param {EntryParamsRequest} entryParamsRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEntry(id: string, entryParamsRequest: EntryParamsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEntry(id, entryParamsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EntriesApi - factory interface
 * @export
 */
export const EntriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EntriesApiFp(configuration)
    return {
        /**
         * Creates a new diary entry
         * @summary
         * @param {EntriesApiCreateEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntry(requestParameters: EntriesApiCreateEntryRequest, options?: AxiosRequestConfig): AxiosPromise<EntryDto> {
            return localVarFp.createEntry(requestParameters.entryParamsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes one entry by its id
         * @summary
         * @param {EntriesApiDeleteEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntry(requestParameters: EntriesApiDeleteEntryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteEntry(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets all entries paginated
         * @summary
         * @param {EntriesApiGetAllEntriesPaginatedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntriesPaginated(requestParameters: EntriesApiGetAllEntriesPaginatedRequest, options?: AxiosRequestConfig): AxiosPromise<PaginatedResultResponse> {
            return localVarFp.getAllEntriesPaginated(requestParameters.page, requestParameters.limit, requestParameters.fromDate, requestParameters.toDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets all the entries for the connected user
         * @summary
         * @param {EntriesApiGetEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntries(requestParameters: EntriesApiGetEntriesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<EntryDto>> {
            return localVarFp.getEntries(requestParameters.fromDate, requestParameters.toDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets one entry by id
         * @summary
         * @param {EntriesApiGetEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntry(requestParameters: EntriesApiGetEntryRequest, options?: AxiosRequestConfig): AxiosPromise<EntryDto> {
            return localVarFp.getEntry(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets stats for the entries
         * @summary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntryStats(options?: AxiosRequestConfig): AxiosPromise<EntryStatsResponse> {
            return localVarFp.getEntryStats(options).then((request) => request(axios, basePath));
        },
        /**
         * Updates one entry by its id
         * @summary
         * @param {EntriesApiUpdateEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntry(requestParameters: EntriesApiUpdateEntryRequest, options?: AxiosRequestConfig): AxiosPromise<EntryDto> {
            return localVarFp.updateEntry(requestParameters.id, requestParameters.entryParamsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createEntry operation in EntriesApi.
 * @export
 * @interface EntriesApiCreateEntryRequest
 */
export interface EntriesApiCreateEntryRequest {
    /**
     *
     * @type {EntryParamsRequest}
     * @memberof EntriesApiCreateEntry
     */
    readonly entryParamsRequest: EntryParamsRequest
}

/**
 * Request parameters for deleteEntry operation in EntriesApi.
 * @export
 * @interface EntriesApiDeleteEntryRequest
 */
export interface EntriesApiDeleteEntryRequest {
    /**
     * Id of the entry
     * @type {string}
     * @memberof EntriesApiDeleteEntry
     */
    readonly id: string
}

/**
 * Request parameters for getAllEntriesPaginated operation in EntriesApi.
 * @export
 * @interface EntriesApiGetAllEntriesPaginatedRequest
 */
export interface EntriesApiGetAllEntriesPaginatedRequest {
    /**
     * Requested page
     * @type {number}
     * @memberof EntriesApiGetAllEntriesPaginated
     */
    readonly page: number

    /**
     * Max number of items
     * @type {number}
     * @memberof EntriesApiGetAllEntriesPaginated
     */
    readonly limit: number

    /**
     * Initial date from which should look for entries
     * @type {string}
     * @memberof EntriesApiGetAllEntriesPaginated
     */
    readonly fromDate?: string

    /**
     * Final date before which should look for entries
     * @type {string}
     * @memberof EntriesApiGetAllEntriesPaginated
     */
    readonly toDate?: string
}

/**
 * Request parameters for getEntries operation in EntriesApi.
 * @export
 * @interface EntriesApiGetEntriesRequest
 */
export interface EntriesApiGetEntriesRequest {
    /**
     * Initial date from which should look for entries
     * @type {string}
     * @memberof EntriesApiGetEntries
     */
    readonly fromDate?: string

    /**
     * Final date before which should look for entries
     * @type {string}
     * @memberof EntriesApiGetEntries
     */
    readonly toDate?: string
}

/**
 * Request parameters for getEntry operation in EntriesApi.
 * @export
 * @interface EntriesApiGetEntryRequest
 */
export interface EntriesApiGetEntryRequest {
    /**
     * Id of the entry
     * @type {string}
     * @memberof EntriesApiGetEntry
     */
    readonly id: string
}

/**
 * Request parameters for updateEntry operation in EntriesApi.
 * @export
 * @interface EntriesApiUpdateEntryRequest
 */
export interface EntriesApiUpdateEntryRequest {
    /**
     * Id of the entry
     * @type {string}
     * @memberof EntriesApiUpdateEntry
     */
    readonly id: string

    /**
     *
     * @type {EntryParamsRequest}
     * @memberof EntriesApiUpdateEntry
     */
    readonly entryParamsRequest: EntryParamsRequest
}

/**
 * EntriesApi - object-oriented interface
 * @export
 * @class EntriesApi
 * @extends {BaseAPI}
 */
export class EntriesApi extends BaseAPI {
    /**
     * Creates a new diary entry
     * @summary
     * @param {EntriesApiCreateEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntriesApi
     */
    public createEntry(requestParameters: EntriesApiCreateEntryRequest, options?: AxiosRequestConfig) {
        return EntriesApiFp(this.configuration).createEntry(requestParameters.entryParamsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes one entry by its id
     * @summary
     * @param {EntriesApiDeleteEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntriesApi
     */
    public deleteEntry(requestParameters: EntriesApiDeleteEntryRequest, options?: AxiosRequestConfig) {
        return EntriesApiFp(this.configuration).deleteEntry(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets all entries paginated
     * @summary
     * @param {EntriesApiGetAllEntriesPaginatedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntriesApi
     */
    public getAllEntriesPaginated(requestParameters: EntriesApiGetAllEntriesPaginatedRequest, options?: AxiosRequestConfig) {
        return EntriesApiFp(this.configuration).getAllEntriesPaginated(requestParameters.page, requestParameters.limit, requestParameters.fromDate, requestParameters.toDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets all the entries for the connected user
     * @summary
     * @param {EntriesApiGetEntriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntriesApi
     */
    public getEntries(requestParameters: EntriesApiGetEntriesRequest = {}, options?: AxiosRequestConfig) {
        return EntriesApiFp(this.configuration).getEntries(requestParameters.fromDate, requestParameters.toDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets one entry by id
     * @summary
     * @param {EntriesApiGetEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntriesApi
     */
    public getEntry(requestParameters: EntriesApiGetEntryRequest, options?: AxiosRequestConfig) {
        return EntriesApiFp(this.configuration).getEntry(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets stats for the entries
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntriesApi
     */
    public getEntryStats(options?: AxiosRequestConfig) {
        return EntriesApiFp(this.configuration).getEntryStats(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates one entry by its id
     * @summary
     * @param {EntriesApiUpdateEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntriesApi
     */
    public updateEntry(requestParameters: EntriesApiUpdateEntryRequest, options?: AxiosRequestConfig) {
        return EntriesApiFp(this.configuration).updateEntry(requestParameters.id, requestParameters.entryParamsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MediaApi - axios parameter creator
 * @export
 */
export const MediaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaControllerGetFile: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mediaControllerGetFile', 'id', id)
            const localVarPath = `/api/v1/media/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {File} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaControllerUploadFile: async (file?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/media`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) {
                localVarFormParams.append('file', file as any);
            }


            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MediaApi - functional programming interface
 * @export
 */
export const MediaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MediaApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mediaControllerGetFile(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mediaControllerGetFile(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {File} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mediaControllerUploadFile(file?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mediaControllerUploadFile(file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MediaApi - factory interface
 * @export
 */
export const MediaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MediaApiFp(configuration)
    return {
        /**
         *
         * @param {MediaApiMediaControllerGetFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaControllerGetFile(requestParameters: MediaApiMediaControllerGetFileRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.mediaControllerGetFile(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {MediaApiMediaControllerUploadFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaControllerUploadFile(requestParameters: MediaApiMediaControllerUploadFileRequest = {}, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.mediaControllerUploadFile(requestParameters.file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for mediaControllerGetFile operation in MediaApi.
 * @export
 * @interface MediaApiMediaControllerGetFileRequest
 */
export interface MediaApiMediaControllerGetFileRequest {
    /**
     *
     * @type {string}
     * @memberof MediaApiMediaControllerGetFile
     */
    readonly id: string
}

/**
 * Request parameters for mediaControllerUploadFile operation in MediaApi.
 * @export
 * @interface MediaApiMediaControllerUploadFileRequest
 */
export interface MediaApiMediaControllerUploadFileRequest {
    /**
     *
     * @type {File}
     * @memberof MediaApiMediaControllerUploadFile
     */
    readonly file?: File
}

/**
 * MediaApi - object-oriented interface
 * @export
 * @class MediaApi
 * @extends {BaseAPI}
 */
export class MediaApi extends BaseAPI {
    /**
     *
     * @param {MediaApiMediaControllerGetFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public mediaControllerGetFile(requestParameters: MediaApiMediaControllerGetFileRequest, options?: AxiosRequestConfig) {
        return MediaApiFp(this.configuration).mediaControllerGetFile(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {MediaApiMediaControllerUploadFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public mediaControllerUploadFile(requestParameters: MediaApiMediaControllerUploadFileRequest = {}, options?: AxiosRequestConfig) {
        return MediaApiFp(this.configuration).mediaControllerUploadFile(requestParameters.file, options).then((request) => request(this.axios, this.basePath));
    }
}


